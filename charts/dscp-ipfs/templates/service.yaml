apiVersion: v1
kind: Service
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: dscp-ipfs
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if or .Values.service.annotations .Values.commonAnnotations }}
  annotations:
    {{- if .Values.service.annotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.service.annotations "context" $) | nindent 4 }}
    {{- end }}
    {{- if .Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
  {{- end }}
spec:
  type: {{ .Values.service.type }}
  {{- if and .Values.service.clusterIP (eq .Values.service.type "ClusterIP") }}
  clusterIP: {{ .Values.service.clusterIP }}
  {{- end }}
  {{- if .Values.service.sessionAffinity }}
  sessionAffinity: {{ .Values.service.sessionAffinity }}
  {{- end }}
  {{- if .Values.service.sessionAffinityConfig }}
  sessionAffinityConfig: {{- include "common.tplvalues.render" (dict "value" .Values.service.sessionAffinityConfig "context" $) | nindent 4 }}
  {{- end }}
  {{- if or (eq .Values.service.type "LoadBalancer") (eq .Values.service.type "NodePort") }}
  externalTrafficPolicy: {{ .Values.service.externalTrafficPolicy | quote }}
  {{- end }}
  {{- if and (eq .Values.service.type "LoadBalancer") (not (empty .Values.service.loadBalancerSourceRanges)) }}
  loadBalancerSourceRanges: {{ .Values.service.loadBalancerSourceRanges }}
  {{- end }}
  {{- if and (eq .Values.service.type "LoadBalancer") (not (empty .Values.service.loadBalancerIP)) }}
  loadBalancerIP: {{ .Values.service.loadBalancerIP }}
  {{- end }}
  ports:
    - name: http
      port: {{ .Values.service.ports.http }}
      protocol: TCP
      {{- if and (or (eq .Values.service.type "NodePort") (eq .Values.service.type "LoadBalancer")) (not (empty .Values.service.nodePorts.http)) }}
      nodePort: {{ .Values.service.nodePorts.http }}
      {{- else if eq .Values.service.type "ClusterIP" }}
      nodePort: null
      {{- end }}
    {{- if .Values.service.extraPorts }}
    {{- include "common.tplvalues.render" (dict "value" .Values.service.extraPorts "context" $) | nindent 4 }}
    {{- end }}
  selector: {{- include "common.labels.matchLabels" . | nindent 4 }}
    app.kubernetes.io/component: dscp-ipfs

{{range $i := until (max ( .Values.replicaCount ) ( .Values.autoscaling.maxReplicas ) | int) }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "common.names.fullname" $ }}-{{ $i }}-swarm
  namespace: {{ include "common.names.namespace" $ | quote }}
  labels: {{- include "common.labels.standard" $ | nindent 4 }}
    app.kubernetes.io/component: dscp-ipfs
    instance: {{ template "common.names.fullname" $ }}-{{ $i }}
    {{- if $.Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if or $.Values.swarmService.annotations $.Values.commonAnnotations }}
  annotations:
    {{- if $.Values.swarmService.annotations }}
    {{- include "common.tplvalues.render" ( dict "value" $.Values.swarmService.annotations "context" $) | nindent 4 }}
    {{- end }}
    {{- if $.Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" $.Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
  {{- end }}
spec:
  type: {{ $.Values.swarmService.type }}
  {{- if and $.Values.swarmService.clusterIP (eq $.Values.swarmService.type "ClusterIP") }}
  clusterIP: {{ $.Values.swarmService.clusterIP }}
  {{- end }}
  {{- if $.Values.swarmService.sessionAffinity }}
  sessionAffinity: {{ $.Values.swarmService.sessionAffinity }}
  {{- end }}
  {{- if $.Values.swarmService.sessionAffinityConfig }}
  sessionAffinityConfig: {{- include "common.tplvalues.render" (dict "value" $.Values.swarmService.sessionAffinityConfig "context" $) | nindent 4 }}
  {{- end }}
  {{- if or (eq $.Values.swarmService.type "LoadBalancer") (eq $.Values.swarmService.type "NodePort") }}
  externalTrafficPolicy: {{ $.Values.swarmService.externalTrafficPolicy | quote }}
  {{- end }}
  {{- if and (eq $.Values.swarmService.type "LoadBalancer") (not (empty $.Values.swarmService.loadBalancerSourceRanges)) }}
  loadBalancerSourceRanges: {{ $.Values.swarmService.loadBalancerSourceRanges }}
  {{- end }}
  {{- if and (eq $.Values.swarmService.type "LoadBalancer") (not (empty $.Values.swarmService.loadBalancerIP)) }}
  loadBalancerIP: {{ $.Values.swarmService.loadBalancerIP }}
  {{- end }}
  ports:
    - name: swarm
      port: {{ $.Values.swarmService.ports.swarm }}
      protocol: TCP
      {{- if and (or (eq $.Values.swarmService.type "NodePort") (eq $.Values.swarmService.type "LoadBalancer")) (not (empty $.Values.swarmService.nodePorts.http)) }}
      nodePort: {{ $.Values.swarmService.nodePorts.swarm }}
      {{- else if eq $.Values.swarmService.type "ClusterIP" }}
      nodePort: null
      {{- end }}
    {{- if $.Values.swarmService.extraPorts }}
    {{- include "common.tplvalues.render" (dict "value" .Values.swarmService.extraPorts "context" $) | nindent 4 }}
    {{- end }}
  selector: {{- include "common.labels.matchLabels" $ | nindent 4 }}
    app.kubernetes.io/component: dscp-ipfs
    statefulset.kubernetes.io/pod-name: {{ template "common.names.fullname" $ }}-{{ $i }}
{{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "common.names.fullname" . }}-api
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: dscp-ipfs
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if or .Values.apiService.annotations .Values.commonAnnotations }}
  annotations:
    {{- if .Values.apiService.annotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.apiService.annotations "context" $) | nindent 4 }}
    {{- end }}
    {{- if .Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
  {{- end }}
spec:
  type: {{ .Values.apiService.type }}
  {{- if and .Values.apiService.clusterIP (eq .Values.apiService.type "ClusterIP") }}
  clusterIP: {{ .Values.apiService.clusterIP }}
  {{- end }}
  {{- if .Values.apiService.sessionAffinity }}
  sessionAffinity: {{ .Values.apiService.sessionAffinity }}
  {{- end }}
  {{- if .Values.apiService.sessionAffinityConfig }}
  sessionAffinityConfig: {{- include "common.tplvalues.render" (dict "value" .Values.apiService.sessionAffinityConfig "context" $) | nindent 4 }}
  {{- end }}
  {{- if or (eq .Values.apiService.type "LoadBalancer") (eq .Values.apiService.type "NodePort") }}
  externalTrafficPolicy: {{ .Values.apiService.externalTrafficPolicy | quote }}
  {{- end }}
  {{- if and (eq .Values.apiService.type "LoadBalancer") (not (empty .Values.apiService.loadBalancerSourceRanges)) }}
  loadBalancerSourceRanges: {{ .Values.apiService.loadBalancerSourceRanges }}
  {{- end }}
  {{- if and (eq .Values.apiService.type "LoadBalancer") (not (empty .Values.apiService.loadBalancerIP)) }}
  loadBalancerIP: {{ .Values.apiService.loadBalancerIP }}
  {{- end }}
  ports:
    - name: api
      port: {{ .Values.apiService.ports.api }}
      protocol: TCP
      {{- if and (or (eq .Values.apiService.type "NodePort") (eq .Values.apiService.type "LoadBalancer")) (not (empty .Values.apiService.nodePorts.http)) }}
      nodePort: {{ .Values.apiService.nodePorts.api }}
      {{- else if eq .Values.apiService.type "ClusterIP" }}
      nodePort: null
      {{- end }}
    {{- if .Values.apiService.extraPorts }}
    {{- include "common.tplvalues.render" (dict "value" .Values.apiService.extraPorts "context" $) | nindent 4 }}
    {{- end }}
  selector: {{- include "common.labels.matchLabels" . | nindent 4 }}
    app.kubernetes.io/component: dscp-ipfs
