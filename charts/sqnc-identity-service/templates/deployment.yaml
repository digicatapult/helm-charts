apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: sqnc-identity-service
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: sqnc-identity-service
  template:
    metadata:
      {{- if .Values.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: sqnc-identity-service
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "sqnc-identity-service.serviceAccountName" . }}
      {{- include "sqnc-identity-service.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "component" "sqnc-identity-service" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "component" "sqnc-identity-service" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if or .Values.initContainers .Values.initDbMigrate.enable (and (not .Values.postgresql.enabled) .Values.externalDatabase.create) }}
      initContainers:
        {{- if and (not .Values.postgresql.enabled) .Values.externalDatabase.create }}
        - name: database-create
          image: {{ template "sqnc-identity-service.initDbCreate.image" . }}
          imagePullPolicy: {{ .Values.initDbCreate.image.pullPolicy }}
          env:
            - name: DB_HOST
              value: {{ template "sqnc-identity-service.databaseHost" . }}
            - name: DB_PORT
              value: {{ template "sqnc-identity-service.databasePort" . }}
            - name: DB_NAME
              value: {{ template "sqnc-identity-service.databaseName" . }}
            - name: DB_USERNAME
              value: {{ template "sqnc-identity-service.databaseUser" . }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "sqnc-identity-service.databaseSecretName" . }}
                  key: {{ include "sqnc-identity-service.databaseSecretPasswordKey" . }}
            - name: DB_POSTGRES_USERNAME
              value: {{ .Values.externalDatabase.postgresqlPostgresUser }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "sqnc-identity-service.databaseSecretName" . }}
                  key: {{ include "sqnc-identity-service.databaseSecretPostgresPasswordKey" . }}
          command:
            - '/bin/sh'
            - '-c'
            - |
              CONN_FLAGS="-h $DB_HOST -p $DB_PORT -U $DB_POSTGRES_USERNAME";
              if [ "$( psql $CONN_FLAGS -tAc "SELECT 1 FROM pg_database WHERE datname=\$\$$DB_NAME\$\$" )" = '1' ]
              then
                echo "Database already exists doing nothing";
                exit 0;
              fi;
              createuser $CONN_FLAGS $DB_USERNAME;
              PSQL_ESC=$(echo $DB_PASSWORD | sed 's/./_/g');
              psql $CONN_FLAGS -c "ALTER ROLE $DB_USERNAME WITH PASSWORD \$$$PSQL_ESC\$$$DB_PASSWORD\$$$PSQL_ESC\$";
              createdb $CONN_FLAGS -O $DB_USERNAME $DB_NAME;
        {{- end }}
        {{- if .Values.initDbMigrate.enable }}
        - name: database-migrate
          image: {{ template "sqnc-identity-service.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ['npx', 'knex']
          {{- if .Values.initDbMigrate.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.initDbMigrate.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: NODE_ENV
              value: {{ .Values.initDbMigrate.environment }}
            - name: DB_HOST
              value: {{ template "sqnc-identity-service.databaseHost" . }}
            - name: DB_PORT
              value: {{ template "sqnc-identity-service.databasePort" . }}
            - name: DB_NAME
              value: {{ template "sqnc-identity-service.databaseName" . }}
            - name: DB_USERNAME
              value: {{ template "sqnc-identity-service.databaseUser" . }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "sqnc-identity-service.databaseSecretName" . }}
                  key: {{ include "sqnc-identity-service.databaseSecretPasswordKey" . }}
        {{- end }}
        {{- if .Values.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: sqnc-identity-service
          image: {{ template "sqnc-identity-service.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: SQNC_DEBUG
              value: {{ ternary "true" "false" (or .Values.image.debug .Values.diagnosticMode.enabled) | quote }}
            - name: PORT
              value: {{ .Values.containerPorts.http | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.logLevel }}
            - name: SELF_ADDRESS
              value: {{ .Values.selfAddress }}
            - name: DB_HOST
              value: {{ template "sqnc-identity-service.databaseHost" . }}
            - name: DB_PORT
              value: {{ template "sqnc-identity-service.databasePort" . }}
            - name: DB_NAME
              value: {{ template "sqnc-identity-service.databaseName" . }}
            - name: DB_USERNAME
              value: {{ template "sqnc-identity-service.databaseUser" . }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "sqnc-identity-service.databaseSecretName" . }}
                  key: {{ include "sqnc-identity-service.databaseSecretPasswordKey" . }}
            - name: API_HOST
              value: {{ include "sqnc-identity-service.sqncNodeHost" . }}
            - name: API_PORT
              value: {{ include "sqnc-identity-service.sqncNodePort" . }}
            - name: AUTH_TYPE
              value: {{ .Values.authType }}
            {{- if or (eq .Values.authType "jwt") (eq .Values.authType "JWT") }}
            - name: AUTH_JWKS_URI
              value: {{ .Values.authJwksUri }}
            - name: AUTH_AUDIENCE
              value: {{ .Values.authAudience }}
            - name: AUTH_ISSUER
              value: {{ .Values.authIssuer }}
            {{- end }}
            {{ if .Values.externalOrigin }}
            - name: EXTERNAL_ORIGIN
              value: {{ .Values.externalOrigin }}
            {{ end }}
            {{ if .Values.externalPathPrefix }}
            - name: EXTERNAL_PATH_PREFIX
              value: {{ .Values.externalPathPrefix }}
            {{ end }}
            {{- if .Values.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.containerPorts.http }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.livenessProbe "enabled" "path") "context" $) | nindent 12 }}
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: http
          {{- end }}
          {{- if .Values.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.readinessProbe "enabled" "path") "context" $) | nindent 12 }}
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: http
          {{- end }}
          {{- if .Values.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.startupProbe "enabled" "path") "context" $) | nindent 12 }}
            httpGet:
              path: {{ .Values.startupProbe.path }}
              port: http
          {{- end }}
          {{- end }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
          {{- if .Values.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
