{{ $fullname :=  include "sqnc-node.fullname" . }}
{{ $serviceLabels :=  include "sqnc-node.serviceLabels" .  }}
{{ $selectorLabels :=  include "sqnc-node.selectorLabels" .  }}
{{ $serviceAccountName :=  include "sqnc-node.serviceAccountName" . }}

apiVersion: apps/v1
kind: Pod
metadata:
  name: {{ $fullname }}-alice
  labels:
      {{- $serviceLabels | nindent 4 }}
spec:
  selector:
    matchLabels:
  {{- $selectorLabels | nindent 6 }}
  podManagementPolicy: {{ default "OrderedReady" .Values.node.podManagementPolicy }}
  replicas: {{ .Values.node.replicas | int }}
  serviceName: {{ $fullname }}-alice
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- $serviceLabels | nindent 4 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.node.chainDataSnapshotUrl }}
        - name: download-chain-snapshot
          image: {{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              if [ -d "/data/chains/${CHAIN_PATH}/db" ]; then
                echo "Database directory already exists, skipping chain snapshot download"
              else
                echo "Downloading chain snapshot"
                SNAPSHOT_URL="{{ .Values.node.chainDataSnapshotUrl }}"
                wget -O /data/snapshot ${SNAPSHOT_URL}
                if [ ! -f /data/snapshot ]; then
                  echo "Failed to download chain snapshot"
                  exit 1
                fi
                mkdir -p /data/chains/${CHAIN_PATH}/
                if [ "${SNAPSHOT_FORMAT}" == "7z" ]; then
                  7z x /data/snapshot -o/data/chains/${CHAIN_PATH}/
                else
                  tar xvf /data/snapshot --directory=/data/chains/${CHAIN_PATH}/db/full/
                fi
                rm /data/snapshot
              fi
          env:
            - name: CHAIN_PATH
              value: {{ default .Values.node.chain .Values.node.chainPath }}
            - name: SNAPSHOT_FORMAT
              value: {{ default "tar" .Values.node.chainDataSnapshotFormat }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
        {{- end }}
        {{- if .Values.node.collator.relayChainDataSnapshotUrl }}
        - name: download-relay-chain-snapshot
          image: {{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              if [ -d "/data/relay/chains/${RELAY_CHAIN_PATH}/db" ]; then
                echo "Database directory already exists, skipping relay-chain snapshot download"
              else
                echo "Downloading relay-chain snapshot"
                RELAY_SNAPSHOT_URL="{{ .Values.node.collator.relayChainDataSnapshotUrl }}"
                wget -O /data/relay-snapshot ${RELAY_SNAPSHOT_URL}
                if [ ! -f /data/relay-snapshot ]; then
                  echo "Failed to download relay-chain snapshot"
                  exit 1
                fi
                mkdir -p /data/relay/chains/${RELAY_CHAIN_PATH}/
                if [ "${RELAY_SNAPSHOT_FORMAT}" == "7z" ]; then
                  7z x /data/relay-snapshot -o/data/relay/chains/${RELAY_CHAIN_PATH}/
                else
                  tar xvf /data/relay-snapshot --directory=/data/relay/chains/${RELAY_CHAIN_PATH}/db/full/
                fi
                rm /data/relay-snapshot
              fi
          env:
            - name: RELAY_SNAPSHOT_FORMAT
              value: {{ default "tar" .Values.node.collator.relayChainDataSnapshotFormat }}
            - name: RELAY_CHAIN_PATH
              value: {{ default .Values.node.collator.relayChain .Values.node.collator.relayChainPath }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
        {{- end }}
        {{- if .Values.node.chainDataGcsBucketUrl }}
        - name: sync-chain-gcs
          image: {{ .Values.googleCloudSdk.image.repository }}:{{ .Values.googleCloudSdk.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              {{- if .Values.googleCloudSdk.serviceAccountKey }}
              gcloud auth activate-service-account --key-file /tmp/service-account-key.json
              {{- end }}
              if [ -d "/data/chains/${CHAIN_PATH}/db" ]; then
                echo "Chain database directory already exists, skipping GCS sync"
              else
                BUCKET_URL="{{ .Values.node.chainDataGcsBucketUrl }}"
                LATEST=$(gsutil cat ${BUCKET_URL}/latest_version.meta.txt)
                if [ -z "$LATEST" ]; then
                  echo "Failed to retrieve latest_version metadata"
                  exit 1
                fi
                mkdir -p /data/chains/${CHAIN_PATH}/db/full
                gsutil -m -o "GSUtil:parallel_process_count=3" -o "GSUtil:parallel_thread_count=15" rsync -d -r ${BUCKET_URL}/${LATEST} /data/chains/${CHAIN_PATH}/db/full/
              fi
          env:
            - name: CHAIN_PATH
              value: {{ default .Values.node.chain .Values.node.chainPath }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
            {{- if .Values.googleCloudSdk.serviceAccountKey }}
            - name: service-account-key
              mountPath: /tmp
              readOnly: true
            {{- end }}
        {{- end }}
        {{- if .Values.node.collator.relayChainDataGcsBucketUrl }}
        - name: sync-relay-chain-gcs
          image: {{ .Values.googleCloudSdk.image.repository }}:{{ .Values.googleCloudSdk.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
               {{- if .Values.googleCloudSdk.serviceAccountKey }}
              gcloud auth activate-service-account --key-file /tmp/service-account-key.json
               {{- end }}
              if [ -d "/data/relay/chains/${RELAY_CHAIN_PATH}/db" ]; then
                echo "Relay-chain database directory already exists, skipping GCS sync"
              else
                BUCKET_URL="{{ .Values.node.collator.relayChainDataGcsBucketUrl }}"
                LATEST=$(gsutil cat ${BUCKET_URL}/latest_version.meta.txt)
                if [ -z "$LATEST" ]; then
                  echo "Failed to retrieve latest_version metadata"
                  exit 1
                fi
                mkdir -p /data/relay/chains/${RELAY_CHAIN_PATH}/db/full
                gsutil -m -o "GSUtil:parallel_process_count=3" -o "GSUtil:parallel_thread_count=15" rsync -d -r ${BUCKET_URL}/${LATEST} /data/relay/chains/${RELAY_CHAIN_PATH}/db/full/
              fi
          env:
            - name: RELAY_CHAIN_PATH
              value: {{ default .Values.node.collator.relayChain .Values.node.collator.relayChainPath }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
             {{- if .Values.googleCloudSdk.serviceAccountKey }}
            - name: service-account-key
              mountPath: /tmp
              readOnly: true
             {{- end }}
         {{- end }}
        {{- if or .Values.node.customChainspecUrl .Values.node.collator.relayChainCustomChainspecUrl }}
        - name: download-chainspec
          image: {{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              {{- if .Values.node.customChainspecUrl }}
              if [ ! -f /data/chainspec.json ]; then
                wget -O /data/chainspec.json {{ .Values.node.customChainspecUrl }}
              fi
              {{- end }}
              {{- if .Values.node.collator.relayChainCustomChainspecUrl }}
              if [ ! -f /data/relay_chain_chainspec.json ]; then
                wget -O /data/relay_chain_chainspec.json {{ .Values.node.collator.relayChainCustomChainspecUrl }}
              fi
              {{- end }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
        {{- end }}
        {{- if .Values.node.keys }}
        - name: inject-keys
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              {{- range $index, $key := .Values.node.keys }}
              echo "{{ $key.seed }}" > /dev/shm/{{ $index }}.key
              {{ $.Values.node.command }} key insert --base-path /data --chain ${CHAIN} --key-type {{ $key.type }} --scheme {{ $key.scheme }} --suri /dev/shm/{{ $index }}.key
              rm /dev/shm/{{ $index }}.key
              {{- end }}
          env:
            - name: CHAIN
              value: {{ .Values.node.chain }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
        {{- end }}
      containers:
        - name: {{ .Values.node.chain }}-alice
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: [ "/bin/sh" ]
          args:
            - -c
            - |
              exec {{ .Values.node.command }} \
                --name=${POD_NAME} \
                --base-path=/data/ \
                --chain={{ if .Values.node.customChainspecUrl }}/data/chainspec.json{{ else }}${CHAIN}{{ end }} \
                {{- if or (eq .Values.node.role "authority") (eq .Values.node.role "validator") }}
                --validator \
                {{- end }}
                {{- if eq .Values.node.role "collator" }}
                --collator \
                {{- end }}
                {{- if eq .Values.node.role "light" }}
                --light \
                {{- end }}
                {{- if .Values.node.collator.isParachain }}
                {{- if .Values.node.perNodeServices.createP2pService }}
                {{- if .Values.node.perNodeServices.setPublicAddressToExternal.enabled }}
                {{- if eq .Values.node.perNodeServices.p2pServiceType "NodePort" }}
                --public-addr=/ip4/${EXTERNAL_ADDRESS}/tcp/${PARA_CHAIN_P2P_PORT} \
                {{- else if eq .Values.node.perNodeServices.p2pServiceType "LoadBalancer" }}
                --public-addr=/dns4/${EXTERNAL_ADDRESS}/tcp/${PARA_CHAIN_P2P_PORT} \
                {{- end }}
                {{- else if and (not .Values.node.perNodeServices.setPublicAddressToExternal.enabled) (eq .Values.node.perNodeServices.p2pServiceType "ClusterIP") }}
                --public-addr=/dns4/${EXTERNAL_ADDRESS}/tcp/${PARA_CHAIN_P2P_PORT} \
                {{- end }}
                --listen-addr=/ip4/0.0.0.0/tcp/${PARA_CHAIN_P2P_PORT} \
                {{- end }}
                --listen-addr=/ip4/0.0.0.0/tcp/30334 \
                {{- end }}
                {{- if .Values.node.persistGeneratedNodeKey }}
                --node-key-file /data/node-key \
                {{- else if .Values.node.customNodeKey }}
                --node-key $(cat /tmp/custom-node-key) \
                {{- end }}
                {{- if .Values.node.tracing.enabled }}
                --jaeger-agent=127.0.0.1:{{ .Values.jaegerAgent.ports.compactPort }} \
                {{- end }}
                {{- join " " .Values.node.flags | nindent 16 }} \
                {{- if .Values.node.collator.isParachain }}
                -- \
                --base-path=/data/relay/ \
                {{- end }}
                {{- if .Values.node.collator.relayChainCustomChainspecUrl }}
                --chain=/data/relay_chain_chainspec.json \
                {{- end }}
                {{- if .Values.node.perNodeServices.createP2pService }}
                {{- if .Values.node.perNodeServices.setPublicAddressToExternal.enabled }}
                {{- if eq .Values.node.perNodeServices.p2pServiceType "NodePort" }}
                --public-addr=/ip4/${EXTERNAL_ADDRESS}/tcp/${RELAY_CHAIN_P2P_PORT} \
                {{- else if eq .Values.node.perNodeServices.p2pServiceType "LoadBalancer" }}
                --public-addr=/dns4/${EXTERNAL_ADDRESS}/tcp/${RELAY_CHAIN_P2P_PORT} \
                {{- end }}
                {{- else if and (not .Values.node.perNodeServices.setPublicAddressToExternal.enabled) (eq .Values.node.perNodeServices.p2pServiceType "ClusterIP") }}
                --public-addr=/dns4/${EXTERNAL_ADDRESS}/tcp/${RELAY_CHAIN_P2P_PORT} \
                {{- end }}
                --listen-addr=/ip4/0.0.0.0/tcp/${RELAY_CHAIN_P2P_PORT} \
                {{- end }}
                --listen-addr=/ip4/0.0.0.0/tcp/30333 \
                {{- join " " .Values.node.collator.relayChainFlags | nindent 16 }}
          env:
            - name: CHAIN
              value: {{ .Values.node.chain }}
            - name: NODE_NAME
              value: {{ $fullname }}-alice
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - containerPort: 9944
              name: rpc
              protocol: TCP
            - containerPort: 9615
              name: prometheus
              protocol: TCP
            - containerPort: 30333
              name: p2p
              protocol: TCP
          {{- if .Values.node.collator.isParachain }}
            - containerPort: 30334
              name: pc-p2p
              protocol: TCP
          {{- end }}
          # On startup, retry the connection to the /health endpoint every 10s for 5 min before killing the container
          startupProbe:
            enabled: false
          readinessProbe:
            enabled: false
          resources:
          {{- toYaml .Values.node.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /data
              name: chain-data
          {{- if .Values.node.persistGeneratedNodeKey }}
          {{- else if .Values.node.customNodeKey }}
            - mountPath: /tmp/
              name: custom-node-key
              readOnly: true
          {{- end }}
      serviceAccountName: {{ $serviceAccountName }}
      securityContext:
      {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.googleCloudSdk.serviceAccountKey }}
        - name: service-account-key
          secret:
            secretName: chain-data-gcs-bucket-service-account-key
      {{- end }}
      {{- if .Values.node.persistGeneratedNodeKey }}
      {{- else if .Values.node.customNodeKey }}
        - name: custom-node-key
          secret:
            secretName: {{ $fullname }}-custom-node-key
      {{- end }}

{{range $i := until ($.Values.node.replicas | int) }}
apiVersion: v1
kind: Pod
metadata:
  name: "{{ $fullname }}-{{ $i }}-post-install-test-suite"
  labels:
      {{- $serviceLabels | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install
spec:
  containers:
    - name: validator-check
      image: {{ $.Values.initContainer.image.repository }}:{{ $.Values.initContainer.image.tag }}
      command: [ "/bin/sh" ]
      args:
        - -c
        - |
          apk add jq curl
          {{- if $.Values.node.role }}
          if [ "$ROLE" = "validator" ]; then
            # checks if finalizing blocks
            # {"jsonrpc":"2.0","id":1,"result":"0x51072f5e26d687bb70acba95bd788bf3864b56723181ce7da94c06cc89a41df8"}
            LASTBLOCKHASH=`curl -sS -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "chain_getFinalizedHead", "params": []}' "http://{{ $fullname }}-{{ $i }}:9444" | jq '.result'`

            # {"jsonrpc":"2.0","id":1,"result":{"block":{"header":{"parentHash":"0x3667463a8809d2f80271fda7be0d6b1346270db28dff7c43fb10af4d942e20f1","number":"0x1b","stateRoot":"0x8877e87f9325bba34e633cae8e2b0ca45d7cfb8e7aae9113b1878af1575ea2fc","extrinsicsRoot":"0xbf1739055f0ad8397998396a6e583b231f106c402a46ef552777c405e9987c9b","digest":{"logs":["0x0642414245340200000000c7ad411100000000","0x0542414245010138e8cf3775bed32ed4801408964ebad44e23c78374925d87c4c720f441035a46408f1a2c3b48ce81e08e4b39540347a410713d72a9131b8500e57fd4fbd8c98d"]}},"extrinsics":["0x280401000b11e858739401"]},"justifications":null}}
            BLOCK=`curl -sS -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "chain_getBlock", "params": ["$LATESTBLOCKHASH"]}' "http://{{ $fullname }}-{{ $i }}:9444" | jq '.result'`

            AUTHOR=`curl -sS -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "eth_coinbase", "params": []}' "http://{{ $fullname }}-{{ $i }}:9444" | jq '.result'`

            echo $LASTBLOCKHASH $BLOCK $AUTHOR

            exit 0
          else
            exit 1
          fi
          {{- end }}
      env:
        - name: RPC
          value: "{{ $fullname }}-{{ $i }}"
        - name: ROLE
          value: {{ default "unknown" $.Values.node.role }}
    - name: block-processing
      image: {{ $.Values.initContainer.image.repository }}:{{ $.Values.initContainer.image.tag }}
      command: [ "/bin/sh" ]
      args:
        - -c
        - |
          apk add jq curl
          # {"jsonrpc":"2.0","id":1,"result":"0x51072f5e26d687bb70acba95bd788bf3864b56723181ce7da94c06cc89a41df8"}
          LASTBLOCK=`curl -sS -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "chain_getFinalizedHead", "params": []}' "http://{{ $fullname }}-{{ $i }}:9944" | jq '.result'`
          sleep 300
          NEWBLOCK=`curl -sS -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "chain_getFinalizedHead", "params": []}' "http://{{ $fullname }}-{{ $i }}:9944" | jq '.result'`
          echo $LASTBLOCK $NEWBLOCK
          if [ "$LASTBLOCK" = "$NEWBLOCK" ]; then
            echo "after 5min last finalized block has not changed"
            exit 1
          else
            exit 0
          fi
    - name: connected-nodes
      image: {{ $.Values.initContainer.image.repository }}:{{ $.Values.initContainer.image.tag }}
      command: [ "/bin/sh" ]
      args:
        - -c
        - |
          apk add jq curl
          # {"jsonrpc":"2.0","id":1,"result":{"peers":0,"isSyncing":false,"shouldHavePeers":false}}
          PEERS=`curl -sS -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "system_syncState", "params": []}' "http://{{ $fullname }}-{{ $i }}:9944" | jq '.result'`
          IS_SYNCING=`curl -sS -H "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "system_health", "params": []}' "http://{{ $fullname }}-{{ $i }}:9944" | jq '.result'`
          echo $IS_SYNCING $PEERS

          if [ "$PEERS" = 0 ]; then
            echo "no peers connected to this node"
            exit 1
          fi

          if [ "$IS_SYNCING" == "false" ]; then
            echo "node is currently not synchronizing"
            exit 2
          fi

          exit 0
      env:
        - name: RPC
          value: "{{ $fullname }}-{{ $i }}"

  restartPolicy: Never
{{ end }}
