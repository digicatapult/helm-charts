apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: veritable-cloudagent
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ template "common.names.fullname" . }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.updateStrategy }}
  updateStrategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: veritable-cloudagent
  template:
    metadata:
      {{- if .Values.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: veritable-cloudagent
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "veritable-cloudagent.serviceAccountName" . }}
      {{- include "veritable-cloudagent.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "component" "veritable-cloudagent" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "component" "veritable-cloudagent" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if or .Values.initContainers .Values.ipfs.initConfig (and (not .Values.postgresql.enabled) .Values.externalDatabase.create) }}
      initContainers:
        {{- if and (not .Values.postgresql.enabled) .Values.externalDatabase.create }}
        - name: database-create
          image: {{ template "veritable-cloudagent.initDbCreate.image" . }}
          imagePullPolicy: {{ .Values.initDbCreate.image.pullPolicy }}
          env:
            - name: DB_HOST
              value: {{ template "veritable-cloudagent.databaseHost" . }}
            - name: DB_PORT
              value: {{ template "veritable-cloudagent.databasePort" . }}
            - name: DB_NAME
              value: {{ template "veritable-cloudagent.databaseName" . }}
            - name: DB_USERNAME
              value: {{ template "veritable-cloudagent.databaseUser" . }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "veritable-cloudagent.databaseSecretName" . }}
                  key: {{ include "veritable-cloudagent.databaseSecretPasswordKey" . }}
            - name: DB_POSTGRES_USERNAME
              value: {{ .Values.externalDatabase.postgresqlPostgresUser }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "veritable-cloudagent.databaseSecretName" . }}
                  key: {{ include "veritable-cloudagent.databaseSecretPostgresPasswordKey" . }}
          command:
            - '/bin/sh'
            - '-c'
            - |
              CONN_FLAGS="-h $DB_HOST -p $DB_PORT -U $DB_POSTGRES_USERNAME";
              if [ "$( psql $CONN_FLAGS -tAc "SELECT 1 FROM pg_database WHERE datname=\$\$$DB_NAME\$\$" )" = '1' ]
              then
                echo "Database already exists doing nothing";
                exit 0;
              fi;
              createuser $CONN_FLAGS $DB_USERNAME;
              PSQL_ESC=$(echo $DB_PASSWORD | sed 's/./_/g');
              psql $CONN_FLAGS -c "ALTER ROLE $DB_USERNAME WITH PASSWORD \$$$PSQL_ESC\$$$DB_PASSWORD\$$$PSQL_ESC\$";
              createdb $CONN_FLAGS -O $DB_USERNAME $DB_NAME;
        {{- end }}
        {{- if .Values.ipfs.initConfig.enabled }}
        - name: init-ipfs-config
          image: {{ .Values.ipfs.image.registry }}/{{ .Values.ipfs.image.repository }}:{{ .Values.ipfs.image.tag }}
          imagePullPolicy: {{ .Values.ipfs.image.pullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else }}
          command:
            - /bin/sh
            - -c
            - -e
          {{- end }}
          args:
            - |
              [ ! -f "{{ .Values.ipfs.persistence.mountPath }}/config" ] && {{ .Values.ipfs.initConfig.binary }} init --profile server;
              export POD_INDEX="${HOSTNAME##*-}";
              {{ .Values.ipfs.initConfig.binary }} config Addresses.API /ip4/0.0.0.0/tcp/{{ .Values.ipfs.containerPorts.api | default 5001 }};
              {{ .Values.ipfs.initConfig.binary }} config --json Addresses.Swarm "[\"/ip4/0.0.0.0/tcp/{{ .Values.ipfs.containerPorts.swarm }}\"]";
              {{ .Values.ipfs.initConfig.binary }} config --json Addresses.Announce "[\"/dns4/{{ include "common.names.fullname" . }}-$(echo "$POD_INDEX")-swarm.{{ .Release.Namespace }}.svc.cluster.local/tcp/{{ .Values.ipfs.containerPorts.swarm }}/\"]";
              {{ .Values.ipfs.initConfig.binary }} config Datastore.StorageMax {{ .Values.ipfs.persistence.size | replace "Gi" "Gb" }};
              {{ .Values.ipfs.initConfig.binary }} config Routing.Type --json {{ .Values.ipfs.initConfig.routingType | toJson | quote }};
              {{ .Values.ipfs.initConfig.binary }} config --json Discovery.MDNS.Enabled {{ true | toJson | quote }};
              {{ .Values.ipfs.initConfig.binary }} config --json Swarm.AddrFilters {{ .Values.ipfs.initConfig.swarmAddrFilters | toJson | quote }};
              {{ .Values.ipfs.initConfig.binary }} config --json API.HTTPHeaders.Access-Control-Allow-Origin "[\"http://0.0.0.0:{{ .Values.ipfs.containerPorts.api }}\", \"http://127.0.0.1:{{ .Values.ipfs.containerPorts.api }}\"]";
              {{ .Values.ipfs.initConfig.binary }} bootstrap rm --all{{ if .Values.ipfs.initConfig.bootNodeAddress }};
              if [ ! -z "$BOOT_NODE_ADDRESS" ]; then {{ .Values.ipfs.initConfig.binary }} bootstrap add {{ .Values.ipfs.initConfig.bootNodeAddress }}; fi;{{ end }}
          volumeMounts:
            - name: ipfs-data
              mountPath: {{ .Values.ipfs.persistence.mountPath }}
              {{- if .Values.ipfs.persistence.subPath }}
              subPath: {{ .Values.ipfs.persistence.subPath }}
              {{- end }}
          env:
            - name: IPFS_PATH
              value: {{ .Values.ipfs.persistence.mountPath }}
            {{- if .Values.ipfs.initConfig.bootNodeAddress }}
            - name: BOOT_NODE_ADDRESS
              value: {{ .Values.ipfs.initConfig.bootNodeAddress }}
            {{- end}}
        {{- end }}
        {{- if .Values.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: veritable-cloudagent
          image: {{ template "veritable-cloudagent.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: VERITABLE_DEBUG
              value: {{ ternary "true" "false" (or .Values.image.debug .Values.diagnosticMode.enabled) | quote }}
            - name: INBOUND_TRANSPORT
              value: '[{"transport":"http","port": {{ .Values.containerPorts.http }}}, {"transport":"ws","port": {{ .Values.containerPorts.ws }}}]'
            - name: LABEL
              value: {{ .Values.label | quote }}
            - name: WALLET_ID
              value: {{ .Values.walletId | quote }}
            - name: WALLET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "veritable-cloudagent.walletSecretName" . }}
                  key: {{ include "veritable-cloudagent.walletSecretKey" . }}
            - name: STORAGE_TYPE
              value: {{ .Values.storageType | quote }}
            - name: ENDPOINT
              value: {{ .Values.endpoint | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | quote }}
            - name: USE_DID_SOV_PREFIX_WHERE_ALLOWED
              value: {{ .Values.useDidSovPrefixWhereAllowed | quote }}
            - name: USE_DID_KEY_IN_PROTOCOLS
              value: {{ .Values.useDidKeyInProtocols | quote }}
            - name: OUTBOUND_TRANSPORT
              value: {{ .Values.outboundTransport | quote }}
            - name: AUTO_ACCEPT_CONNECTIONS
              value: {{ .Values.autoAcceptConnections | quote }}
            - name: AUTO_ACCEPT_CREDENTIALS
              value: {{ .Values.autoAcceptCredentials | quote }}
            - name: AUTO_ACCEPT_MEDIATION_REQUESTS
              value: {{ .Values.autoAcceptMediationRequests | quote }}
            - name: AUTO_ACCEPT_PROOFS
              value: {{ .Values.autoAcceptProofs | quote }}
            - name: AUTO_UPDATE_STORAGE_ON_STARTUP
              value: {{ .Values.autoUpdateStorageOnStartup | quote }}
            - name: BACKUP_BEFORE_STORAGE_UPDATE
              value: {{ .Values.backupBeforeStorageUpdate | quote }}
            {{- if .Values.connectionImageUrl }}
            - name: CONNECTION_IMAGE_URL
              value: {{ .Values.connectionImageUrl | quote }}
            {{- end }}
            {{- if .Values.webhookUrl }}
            - name: WEBHOOK_URL
              value: {{.Values.webhookUrl | quote }}
            {{- end }}
            - name: ADMIN_PORT
              value: {{ .Values.adminPort | quote }}
            - name: IPFS_ORIGIN
            {{- if .Values.ipfs.enabled }}
              value: "http://localhost:{{ .Values.ipfs.containerPorts.api }}"
            {{- else }}
              value: {{ .Values.ipfsExternalOrigin | quote }}
            {{- end }}
            {{- if eq .Values.storageType "postgres" }}
            - name: POSTGRES_HOST
              value: {{ template "veritable-cloudagent.databaseHost" . }}
            - name: POSTGRES_PORT
              value: {{ template "veritable-cloudagent.databasePort" . }}
            - name: POSTGRES_USERNAME
              value: {{ template "veritable-cloudagent.databaseUser" . }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "veritable-cloudagent.databaseSecretName" . }}
                  key: {{ include "veritable-cloudagent.databaseSecretPasswordKey" . }}
            {{- end }}
            - name: PERSONA_TITLE
              value: {{ .Values.personaTitle | quote }}
            - name: PERONA_COLOR
              value: {{ .Values.personaColor | quote }}
            - name: VERIFIED_DRPC_OPTOPNS_PROOF_TIMEOUT_MS
              value: {{ .Values.verifiedDrpcOptionsProofTimeoutMs | quote }}
            - name: VERIFIED_DRPC_OPTIONS_REQUEST_TIMEOUT_MS
              value: {{ .Values.verifiedDrpcOptionsRequestTimeoutMs | quote }}
            {{- if .Values.verifiedDrpcOptionsProofRequestOptions }}
            - name: VERIFIED_DRPC_OPTIONS_PROOF_REQUEST_OPTIONS
              value: {{ .Values.verifiedDrpcOptionsProofRequestOptions | quote }}
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.containerPorts.http }}
            - name: ws
              containerPort: {{ .Values.containerPorts.ws }}
            - name: admin
              containerPort: {{ .Values.containerPorts.admin }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.livenessProbe "enabled" "path") "context" $) | nindent 12 }}
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: admin
          {{- end }}
          {{- if .Values.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.readinessProbe "enabled" "path") "context" $) | nindent 12 }}
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: admin
          {{- end }}
          {{- if .Values.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.startupProbe "enabled" "path") "context" $) | nindent 12 }}
            httpGet:
              path: {{ .Values.startupProbe.path }}
              port: admin
          {{- end }}
          {{- end }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
          {{- if .Values.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if eq .Values.ipfs.enabled true }}
        - name: ipfs
          image: {{ .Values.ipfs.image.registry }}/{{ .Values.ipfs.image.repository }}:{{ .Values.ipfs.image.tag }}
          imagePullPolicy: {{ .Values.ipfs.image.pullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          ports:
            - name: api
              containerPort: {{ .Values.ipfs.containerPorts.api }}
            - name: swarm
              containerPort: {{ .Values.ipfs.containerPorts.swarm }}
          volumeMounts:
            - name: ipfs-data
              mountPath: {{ .Values.ipfs.persistence.mountPath }}
            {{- if .Values.ipfs.volumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.ipfs.volumeMounts "context" $) | nindent 6 }}
            {{- end }}
          {{- if .Values.ipfs.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
              - ipfs
              - version
            initialDelaySeconds: {{ .Values.ipfs.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.ipfs.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.ipfs.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.ipfs.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.ipfs.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.ipfs.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: api
            initialDelaySeconds: {{ .Values.ipfs.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.ipfs.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.ipfs.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.ipfs.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.ipfs.readinessProbe.successThreshold }}
          {{- end }}
          env:
            - name: IPFS_PATH
              value: {{ .Values.ipfs.persistence.mountPath }}
            {{- if .Values.ipfs.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.ipfs.extraEnvVars "context" $) | nindent 6 }}
            {{- end }}
          resources:
            {{- toYaml .Values.ipfs.resources | nindent 6 }}
        {{- if .Values.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      volumes:
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
        {{- if eq .Values.ipfs.enabled true }}
        {{- if and .Values.ipfs.enabled (not .Values.ipfs.persistence.enabled) }}
        - name: ipfs-data
          emptyDir: {}
        {{- end }}
        {{- if .Values.ipfs.volumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.ipfs.volumes "context" $) | nindent 4 }}
        {{- end }}
        {{- end }}
  volumeClaimTemplates:
    {{- if and .Values.ipfs.enabled .Values.ipfs.persistence.enabled }}
    - metadata:
        name: ipfs-data
        annotations:
          {{- if .Values.ipfs.persistence.annotations }}
          {{- include "common.tplvalues.render" (dict "value" .Values.ipfs.persistence.annotations "context" $) | nindent 10 }}
          {{- end }}
      spec:
        accessModes: {{- toYaml .Values.ipfs.persistence.accessModes | nindent 8 }}
        resources:
          requests:
            storage: {{ .Values.ipfs.persistence.size }}
        {{- if .Values.ipfs.persistence.storageClass }}
        storageClassName: {{ .Values.ipfs.persistence.storageClass | quote }}
        {{- end }}
    {{- end }}
