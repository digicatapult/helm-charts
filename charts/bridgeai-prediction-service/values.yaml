# Default values for bridgeai-prediction-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/digicatapult/bridgeai-prediction-service
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v0.1.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

modelPredictionEndpoint: "http://model/prediction/endpoint"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## Bitnami PostgreSQL subcharts

## @section Init Container Parameters
##
initDbCreate:
  ## PostreSQL image
  ## ref: https://hub.docker.com/_/postgres/tags/
  ## @param initDbCreate.image.registry sqnc-routing-service image registry
  ## @param initDbCreate.image.repository sqnc-routing-service image repository
  ## @param initDbCreate.image.tag sqnc-routing-service image tag (immutable tags are recommended)
  ## @param initDbCreate.image.digest sqnc-routing-service image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)
  ## @param initDbCreate.image.pullPolicy sqnc-routing-service image pull policy
  ## @param initDbCreate.image.pullSecrets sqnc-routing-service image pull secrets
  ##
  image:
    registry: docker.io
    repository: postgres
    tag: '16-alpine'
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []

## @param initDbMigrate.enable Run database migration in an init container
## @param initDbMigrate.environment Database configuration environment to run database into
## @param initDbMigrate.args Argument to pass to knex to migrate the database
initDbMigrate:
  enable: true
  environment: production
  args:
    - "migrate:latest"

## PostgreSQL chart configuration
## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
## @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
## @param postgresql.auth.username Name for a custom user to create
## @param postgresql.auth.password Password for the custom user to create
## @param postgresql.auth.database Name for a custom database to create
## @param postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials
## @param postgresql.architecture PostgreSQL architecture (`standalone` or `replication`)
##
postgresql:
  enabled: true
  auth:
    username: prediction_service
    password: ""
    database: user
    existingSecret: ""
  architecture: standalone

## External PostgreSQL configuration
## All of these values are only used when postgresql.enabled is set to false
## @param externalDatabase.host Database host
## @param externalDatabase.port Database port number
## @param externalDatabase.user Non-root username for bridgeai-prediction-service
## @param externalDatabase.password Password for the non-root username for bridgeai-prediction-service
## @param externalDatabase.database bridgeai-prediction-service database name
## @param externalDatabase.create Enable PostgreSQL user and database creation (when using an external db)
## @param externalDatabase.postgresqlPostgresUser External Database admin username
## @param externalDatabase.postgresqlPostgresPassword External Database admin password
## @param externalDatabase.existingSecret Name of an existing secret resource containing the database credentials
## @param externalDatabase.existingSecretPasswordKey Name of an existing secret key containing the non-root credentials
## @param externalDatabase.existingSecretPostgresPasswordKey Name of an existing secret key containing the admin credentials
##
externalDatabase:
  host: ""
  port: 5432
  user: prediction_service
  password: ""
  database: user
  create: true
  postgresqlPostgresUser: "postgres"
  postgresqlPostgresPassword: ""
  existingSecret: ""
  existingSecretPasswordKey: ""
  existingSecretPostgresPasswordKey: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: model-prediction.local
      paths:
        - path: /predict
          pathType: Prefix
        - path: /data
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## @param command Override default container command (useful when using custom images)
##
command:
  - "uvicorn"
  - "src.main:app"
## @param args Override default container args (useful when using custom images)
##
args:
  - "--host"
  - "0.0.0.0"
  - "--reload"

## @param envVars Array with extra environment variables to add to the prediction service container
envVars: []

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
