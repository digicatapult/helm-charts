# Default values for bridgeai-prediction-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @param replicaCount Number of replicas to deploy
replicaCount: 1

## @section Container Image Parameters
##
## @param image.repository Prediction service image repository
## @param image.pullPolicy Prediction service image pull policy
## @param image.tag Prediction service image tag
image:
  repository: digicatapult/bridgeai-prediction-service
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v0.3.5"

## @param imagePullSecrets Specify image pull secrets
imagePullSecrets: []

## @section Chart Parameters

## @param nameOverride Override name for the chart
nameOverride: ""

## @param fullnameOverride Override full name for the chart
fullnameOverride: ""

## @section Config Parameters

## @param modelPredictionEndpoint Endpoint for the prediction model
modelPredictionEndpoint: "http://model/prediction/endpoint"
## @param command Command to override default container entrypoint
command:
  - "uvicorn"
  - "src.main:app"

## @param args Args to override default container arguments
args:
  - "--host"
  - "0.0.0.0"
  - "--reload"


## @section Service Account Parameters
##
## @param serviceAccount.create Specifies whether a service account should be created
## @param serviceAccount.automount Automatically mount a ServiceAccount's API credentials
## @param serviceAccount.annotations Annotations to add to the service account
## @param serviceAccount.name The name of the service account to use
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

## @section Init Container Parameters
##
initDbCreate:
  ## PostreSQL image
  ## ref: https://hub.docker.com/_/postgres/tags/
  ## @param initDbCreate.image.registry PostgreSQL image registry
  ## @param initDbCreate.image.repository PostgreSQL image repository
  ## @param initDbCreate.image.tag PostgreSQL image tag (immutable tags are recommended)
  ## @param initDbCreate.image.digest PostgreSQL image digest (sha256)
  ## @param initDbCreate.image.pullPolicy PostgreSQL image pull policy
  ## @param initDbCreate.image.pullSecrets PostgreSQL image pull secrets
  image:
    registry: docker.io
    repository: postgres
    tag: '17-alpine'
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []

## @param initDbMigrate.enable Run database migration in an init container
## @param initDbMigrate.environment Database configuration environment to run migration
## @param initDbMigrate.args Arguments to pass to alembic to migrate the database
initDbMigrate:
  enable: true
  environment: production
  args: ["upgrade", "head"]


## @section Database Parameters
## PostgreSQL chart configuration
## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
## @param postgresql.enabled Enable or disable PostgreSQL helm chart
## @param postgresql.auth.username Custom PostgreSQL user
## @param postgresql.auth.password Custom PostgreSQL user password
## @param postgresql.auth.database Custom PostgreSQL database
## @param postgresql.auth.existingSecret Existing secret for PostgreSQL credentials
## @param postgresql.architecture PostgreSQL architecture (`standalone` or `replication`)
postgresql:
  enabled: true
  auth:
    username: admin
    password: ""
    database: prediction
    existingSecret: ""
  architecture: standalone

## External PostgreSQL configuration
## All values used only when postgresql.enabled is false
## @param externalDatabase.host External database host
## @param externalDatabase.port External database port number
## @param externalDatabase.user Username for external database
## @param externalDatabase.password Password for external database
## @param externalDatabase.database External database name
## @param externalDatabase.create Enable PostgreSQL user and database creation (external DB)
## @param externalDatabase.postgresqlPostgresUser External Database admin user
## @param externalDatabase.postgresqlPostgresPassword External Database admin password
## @param externalDatabase.existingSecret Existing secret containing database credentials
## @param externalDatabase.existingSecretPasswordKey Secret key for user credentials
## @param externalDatabase.existingSecretPostgresPasswordKey Secret key for admin credentials
externalDatabase:
  host: ""
  port: 5432
  user: admin
  password: ""
  database: prediction
  create: true
  postgresqlPostgresUser: "postgres"
  postgresqlPostgresPassword: ""
  existingSecret: ""
  existingSecretPasswordKey: ""
  existingSecretPostgresPasswordKey: ""

## @section Pod Configuration Parameters
##
## @param podAnnotations Extra annotations for the pod
podAnnotations: {}

## @param podLabels Extra labels for the pod
podLabels: {}

## @param podSecurityContext Pod security context settings
podSecurityContext: {}
  # fsGroup: 2000

## @param securityContext Container security context settings
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## @section Service Parameters
##
## @param service.type Kubernetes service type (ClusterIP, NodePort, LoadBalancer)
## @param service.port Service port to expose
service:
  type: ClusterIP
  port: 8000

## @section Ingress Parameters
##
## @param ingress.enabled Enable or disable ingress controller
## @param ingress.className IngressClass to use for resource implementation
## @param ingress.annotations Annotations to add to the Ingress resource
## @param ingress.hosts[0].host Hostname to route requests
## @param ingress.hosts[0].paths[0].path Path to match against requests
## @param ingress.hosts[0].paths[0].pathType Type of path matching rule (`Prefix` or `Exact`)
## @param ingress.hosts[0].paths[1].path Path to match against requests for /data
## @param ingress.hosts[0].paths[1].pathType Type of path matching rule (`Prefix` or `Exact`) for /data
## @param ingress.hosts[0].paths[2].path Path to match against requests for /swagger
## @param ingress.hosts[0].paths[2].pathType Type of path matching rule (`Prefix` or `Exact`) for /swagger
## @param ingress.hosts[0].paths[3].path Path to match against requests for /openapi.json
## @param ingress.hosts[0].paths[3].pathType Type of path matching rule (`Prefix` or `Exact`) for /openapi.json
## @param ingress.tls TLS configuration for ingress
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: model-prediction.local
      paths:
        - path: /predict
          pathType: Prefix
        - path: /data
          pathType: Prefix
        - path: /swagger
          pathType: Prefix
        - path: /openapi.json
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## @section Resources Parameters
##
## @param resources Resource requests and limits
resources: {}
  # Uncomment below lines to set specific resources.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## @param envVars Additional environment variables for prediction service container
envVars: []

## @param livenessProbe.httpGet.path Path to perform liveness probe on container
## @param livenessProbe.httpGet.port Port to perform liveness probe on container
livenessProbe:
  httpGet:
    path: /
    port: http

## @param readinessProbe.httpGet.path Path to perform readiness probe on container
## @param readinessProbe.httpGet.port Port to perform readiness probe on container
readinessProbe:
  httpGet:
    path: /
    port: http

## @section Autoscaling Parameters
##
## @param autoscaling.enabled Enable or disable autoscaling for the prediction service
## @param autoscaling.minReplicas Minimum number of replicas
## @param autoscaling.maxReplicas Maximum number of replicas
## @param autoscaling.targetCPUUtilizationPercentage Target CPU utilization for autoscaling
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

## @section Volume Parameters
##
## @param volumes Additional volumes for the prediction service
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

## @param volumeMounts Additional volume mounts for the prediction service
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

## @param nodeSelector Node labels for pod assignment
nodeSelector: {}

## @param tolerations Tolerations for pod assignment
tolerations: []

## @param affinity Affinity rules for pod assignment
affinity: {}
